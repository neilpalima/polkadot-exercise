{"version":3,"sources":["components/Header.tsx","components/Footer.tsx","app/hooks.ts","components/LoadingOverlay.tsx","features/polkadotScan/polkadotApi.tsx","features/polkadotScan/scanSlice.ts","features/polkadotScan/scanForm.tsx","features/polkadotScan/eventsTable.tsx","features/polkadotScan/index.tsx","features/authentication/authApi.ts","features/authentication/authSlice.ts","features/authentication/authForm.tsx","features/authentication/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","appBar","flexGrow","title","Header","classes","AppBar","className","Toolbar","Typography","variant","color","Copyright","Date","getFullYear","footer","padding","spacing","marginTop","Footer","useAppDispatch","useDispatch","useAppSelector","useSelector","backdrop","zIndex","drawer","SimpleBackdrop","Backdrop","open","CircularProgress","create","ws","wsProvider","WsProvider","Promise","resolve","reject","a","on","disconnect","ApiPromise","provider","then","catch","getLatestBlock","api","rpc","chain","getHeader","lastHeader","number","toNumber","getBlockDetails","block","getBlockHash","blockHash","getBlock","signedStartBlock","query","system","events","at","header","hash","allRecords","results","extrinsics","forEach","index","method","section","extrinsic","filter","phase","isApplyExtrinsic","asApplyExtrinsic","eq","event","push","data","toHuman","getEvents","options","endpoint","latestBlock","startBlockInt","startBlock","endBlockInt","endBlock","Error","promises","all","flat","initialLoadingState","value","loading","initialState","createAsyncThunk","values","polkadotApi","scanSlice","createSlice","name","reducers","resetError","state","error","undefined","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","actions","selectScanError","scan","selectEvents","selectLatestBlock","form","width","submit","margin","schema","Yup","shape","required","min","integer","max","ScanForm","props","onSubmit","onCloseError","initialValues","enableReinitialize","validationSchema","setSubmitting","submitForm","Alert","severity","onClose","Box","component","TextField","type","label","fullWidth","LinearProgress","Button","disabled","onClick","CustomChip","onDelete","Chip","CustomFilterList","ItemComponent","EventsTable","columns","sort","customBodyRender","Array","isArray","item","JSON","stringify","elevation","rowsPerPage","rowsPerPageOptions","selectableRows","responsive","textLabels","body","noMatch","toolTip","columnHeaderTooltip","column","search","download","print","viewColumns","components","TableFilterList","root","center","display","flexDirection","alignItems","avatar","backgroundColor","palette","primary","main","Scan","scanError","dispatch","useEffect","eventsData","Container","maxWidth","Avatar","length","authenticate","password","axios","post","response","postAuthentication","authApi","counterSlice","authenticated","selectAuth","auth","Auth","history","useHistory","App","CssBaseline","height","exact","path","to","store","configureStore","reducer","authReducer","scanReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.297f5fb3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    flexGrow: 1\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nexport default function Header() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar className={classes.appBar}>\r\n      <Toolbar>\r\n        <Typography\r\n          variant=\"h6\"\r\n          color=\"inherit\"\r\n          className={classes.title}\r\n        >\r\n          Polkadot Scanner\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\">\r\n      {'Copyright © '}\r\n      Polkadot Scanner\r\n      {' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  footer: {\r\n    padding: theme.spacing(3),\r\n    marginTop: 'auto',\r\n  },\r\n}));\r\n\r\nexport default function Footer() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <footer className={classes.footer}>\r\n      <Copyright />\r\n    </footer>\r\n  );\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nexport default function SimpleBackdrop() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Backdrop className={classes.backdrop} open>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  );\r\n}","import { ApiPromise, WsProvider } from '@polkadot/api';\r\n\r\nimport { EventsSearchParameters, EventsTableData } from './scanSlice';\r\n\r\nconst create = (ws: string = 'wss://rpc.polkadot.io'): Promise<ApiPromise> => {\r\n  const wsProvider = new WsProvider(ws);\r\n\r\n  return new Promise(async(resolve, reject) => {\r\n    wsProvider.on('error', () => {\r\n      wsProvider.disconnect();\r\n      reject('Failed to connect polkadot endpoint');\r\n    });\r\n    wsProvider.on('connected', () =>\r\n      ApiPromise.create({ provider: wsProvider })\r\n        .then(resolve)\r\n        .catch(reject)\r\n      );\r\n  });\r\n};\r\n\r\nexport const getLatestBlock = async (api?: ApiPromise): Promise<number> => {\r\n  if (!api) {\r\n    api = await create();\r\n  };\r\n\r\n  const lastHeader = await api.rpc.chain.getHeader();\r\n\r\n  return lastHeader.number.toNumber();\r\n};\r\n\r\nconst getBlockDetails = async (api: ApiPromise, block: number): Promise<EventsTableData[]> => {\r\n  const blockHash = await api.rpc.chain.getBlockHash(block);\r\n  const signedStartBlock = await api.rpc.chain.getBlock(blockHash);\r\n\r\n  const allRecords = await api.query.system.events.at(signedStartBlock.block.header.hash);\r\n\r\n  const results: EventsTableData[] = [];\r\n\r\n  signedStartBlock.block.extrinsics.forEach(({ method: { method, section } }, index) => {\r\n    const extrinsic = `${section}.${method}`;\r\n    // filter the specific events based on the phase and then the\r\n    // index of our extrinsic in the block\r\n    allRecords\r\n      .filter(({ phase }) =>\r\n        phase.isApplyExtrinsic &&\r\n        phase.asApplyExtrinsic.eq(index)\r\n      )\r\n      .forEach(({ event }) => results.push({\r\n        event: `${event.section}.${event.method}`,\r\n        data: event.data.toHuman(),\r\n        extrinsic,\r\n        block\r\n      }));\r\n  });\r\n\r\n  return results;\r\n};\r\n\r\nexport const getEvents = async (options: EventsSearchParameters): Promise<EventsTableData[]> => {\r\n  const api = await create(options.endpoint);\r\n\r\n  const latestBlock = await getLatestBlock(api);\r\n  const startBlockInt = +options.startBlock;\r\n  const endBlockInt = +options.endBlock;\r\n\r\n  if (latestBlock < endBlockInt) {\r\n    throw new Error(`Start/end block exceeds latest block: ${latestBlock}`);\r\n  }\r\n\r\n  const promises: Promise<EventsTableData[]>[] = [];\r\n\r\n  for (let block = startBlockInt; block <= endBlockInt; block++) {\r\n    promises.push(getBlockDetails(api, block));\r\n  }\r\n\r\n  const results = await Promise.all(promises);\r\n\r\n  return results.flat();\r\n};\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from 'app/store';\n\nimport * as polkadotApi from './polkadotApi';\n\nexport interface LoadingState <T> {\n  value: T | null;\n  loading: boolean;\n};\n\nexport interface ScanState {\n  events: LoadingState <EventsTableData[]>,\n  latestBlock: LoadingState <string | number>\n  error?: string;\n};\n\nexport interface EventsSearchParameters {\n  startBlock: string;\n  endBlock: string;\n  endpoint: string;\n};\n\nexport interface EventsTableData {\n  extrinsic: string;\n  block: string | number,\n  event: string,\n  data: unknown\n}\n\nconst initialLoadingState = {\n  value: null,\n  loading: false\n};\n\nconst initialState: ScanState = {\n  events: {\n    ...initialLoadingState\n  },\n  latestBlock: {\n    ...initialLoadingState\n  }\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const getEvents = createAsyncThunk(\n  'scan/fetchEvents',\n  async (values: EventsSearchParameters) => {\n    return await polkadotApi.getEvents(values);\n  }\n);\n\nexport const getLatestBlock = createAsyncThunk(\n  'scan/latestBlock',\n  async () => {\n    return await polkadotApi.getLatestBlock();\n  }\n);\n\nexport const scanSlice = createSlice({\n  name: 'scan',\n  initialState,\n  reducers: {\n    resetError: (state) => {\n      state.error = undefined;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(getEvents.pending, (state) => {\n        state.events.loading = true;\n        state.events.value = [];\n        state.error = undefined;\n      })\n      .addCase(getEvents.fulfilled, (state, action) => {\n        state.events.loading = false;\n        state.events.value = action.payload as any;\n      })\n      .addCase(getEvents.rejected, (state, action) => {\n        state.events.loading = false;\n        state.error = action.error.message;\n      })\n      .addCase(getLatestBlock.pending, (state) => {\n        state.latestBlock.loading = true;\n        state.error = undefined;\n      })\n      .addCase(getLatestBlock.fulfilled, (state, action) => {\n        state.latestBlock.loading = false;\n        state.latestBlock.value = action.payload;\n      })\n      .addCase(getLatestBlock.rejected, (state, action) => {\n        state.latestBlock.loading = false;\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport const { resetError } = scanSlice.actions;\n\nexport const selectScanError = (state: RootState) => state.scan.error;\nexport const selectEvents = (state: RootState) => state.scan.events;\nexport const selectLatestBlock = (state: RootState) => state.scan.latestBlock;\n\nexport default scanSlice.reducer;\n","import React from 'react';\r\nimport { Button, LinearProgress } from '@material-ui/core';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { TextField } from 'formik-material-ui';\r\nimport * as Yup from 'yup';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(2, 0, 6),\r\n  },\r\n}));\r\n\r\nconst schema = Yup.object().shape({\r\n  startBlock: Yup.number()\r\n    .required('Required')\r\n    .min(1)\r\n    .integer(\"Must be a whole number\")\r\n    .max(Yup.ref(\"endBlock\"), \"Must be less than or equal to end block\"),\r\n  endBlock: Yup.number()\r\n    .min(1)\r\n    .integer(\"Must be a whole number\")\r\n    .required('Required'),\r\n  endpoint: Yup.string()\r\n    .required('Required'),\r\n});\r\n\r\ntype ScanFormProps = {\r\n  onSubmit: Function;\r\n  onCloseError: (event: React.SyntheticEvent<Element, Event>) => void;\r\n  latestBlock: number | string | null;\r\n  loading: boolean;\r\n  error?: string;\r\n};\r\n\r\nfunction ScanForm(props: ScanFormProps) {\r\n  const { onSubmit, onCloseError, latestBlock, loading, error } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        startBlock: '',\r\n        endBlock: latestBlock ?? '',\r\n        endpoint: 'wss://rpc.polkadot.io'\r\n      }}\r\n      enableReinitialize\r\n      validationSchema={schema}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setSubmitting(false);\r\n        onSubmit(values);\r\n      }}\r\n    >\r\n      {({ submitForm }) => (\r\n        <Form className={classes.form}>\r\n          {error && (\r\n            <Alert severity=\"error\" onClose={onCloseError}>{error}</Alert>\r\n          )}\r\n          <Box>\r\n            <Field\r\n              component={TextField}\r\n              name=\"startBlock\"\r\n              type=\"number\"\r\n              label=\"Start Block\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Field\r\n              component={TextField}\r\n              name=\"endBlock\"\r\n              type=\"number\"\r\n              label=\"End Block\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Field\r\n              component={TextField}\r\n              name=\"endpoint\"\r\n              type=\"text\"\r\n              label=\"Endpoint\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </Box>\r\n          {loading && (\r\n            <Box margin=\"10px 0px\">\r\n              <LinearProgress />\r\n            </Box>\r\n          )}\r\n          <Button\r\n            className={classes.submit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={loading}\r\n            onClick={submitForm}\r\n            fullWidth\r\n          >\r\n            Scan\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default ScanForm;\r\n","import React from 'react';\r\nimport { Box, Chip } from '@material-ui/core';\r\nimport MUIDataTable, { TableFilterList } from \"mui-datatables\";\r\n\r\nimport { EventsTableData } from './scanSlice';\r\n\r\ntype EventsTableProps = {\r\n  data: EventsTableData[]\r\n};\r\n\r\nconst CustomChip = ({ label, onDelete } : any) => {\r\n  return (\r\n      <Chip\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          label={label}\r\n          onDelete={onDelete}\r\n      />\r\n  );\r\n};\r\n\r\nconst CustomFilterList = (props: any) => {\r\n  return <TableFilterList {...props} ItemComponent={CustomChip} />;\r\n};\r\n\r\nfunction EventsTable(props: EventsTableProps) {\r\n  const { data } = props;\r\n\r\n  const columns = [\r\n    {\r\n      name: \"block\",\r\n      label: \"Block\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"extrinsic\",\r\n      label: \"Extrinsic\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"event\",\r\n      label: \"Event\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"data\",\r\n      label: \"Event Data\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n        customBodyRender: (value: any) => {\r\n          if (typeof value === \"object\" && Array.isArray(value)) {\r\n            const item = value[0];\r\n            return typeof item === \"object\" ? JSON.stringify(item) : item;\r\n          }\r\n\r\n          return value;\r\n        }\r\n      }\r\n    },\r\n  ];\r\n\r\n   const options = {\r\n    elevation: 2,\r\n    rowsPerPage: 25,\r\n    rowsPerPageOptions: [10, 25, 50],\r\n    selectableRows: 'none' as any,\r\n    responsive: 'standard' as 'standard',\r\n    textLabels: {\r\n      body: {\r\n        noMatch: 'Sorry, no matching records found',\r\n        toolTip: 'Sort',\r\n        columnHeaderTooltip: (column: any) => `Sort for ${column.label}`\r\n      }\r\n    },\r\n    search: false,\r\n    download: false,\r\n    print: false,\r\n    viewColumns: false,\r\n    filter: true\r\n   };\r\n\r\n  return (\r\n    <Box width=\"100%\">\r\n      <MUIDataTable\r\n        title={\"\"}\r\n        data={data}\r\n        columns={columns}\r\n        options={options}\r\n        components={{\r\n          TableFilterList: CustomFilterList,\r\n        }}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default EventsTable;\r\n","import React, { useEffect } from 'react';\nimport { Container, Avatar, Typography } from '@material-ui/core';\nimport ExploreIcon from '@material-ui/icons/Explore';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\n\nimport { useAppSelector, useAppDispatch } from 'app/hooks';\nimport LoadingOverlay from 'components/LoadingOverlay';\n\nimport {\n  EventsSearchParameters,\n  getEvents,\n  getLatestBlock,\n  resetError,\n  selectEvents,\n  selectLatestBlock,\n  selectScanError\n} from './scanSlice';\nimport ScannerForm from './scanForm';\nimport EventsTable from './eventsTable';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(10, 0, 8),\n  },\n  center: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(2),\n    backgroundColor: theme.palette.primary.main,\n  }\n}));\n\nexport default function Scan() {\n  const scan = useAppSelector(selectEvents);\n  const latestBlock = useAppSelector(selectLatestBlock);\n  const scanError = useAppSelector(selectScanError);\n  const dispatch = useAppDispatch();\n  const classes = useStyles();\n\n  useEffect(() => {\n    dispatch(getLatestBlock());\n  }, [dispatch]);\n\n  const handleGetScanEvents = (values: EventsSearchParameters) => {\n    dispatch(getEvents(values));\n  };\n\n  const handleCloseScanError = () => {\n    dispatch(resetError());\n  };\n\n  const eventsData = scan.value || [];\n\n  return (\n    <Box className={classes.root}>\n      {latestBlock.loading && (\n        <LoadingOverlay />\n      )}\n      <Container maxWidth=\"sm\">\n        <Box className={classes.center}>\n          <Avatar className={classes.avatar}>\n            <ExploreIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Scan\n          </Typography>\n          <ScannerForm\n            onSubmit={handleGetScanEvents}\n            onCloseError={handleCloseScanError}\n            latestBlock={latestBlock.value}\n            loading={scan.loading}\n            error={scanError}\n          />\n        </Box>\n      </Container>\n      <Container maxWidth=\"xl\">\n        {eventsData.length > 0 && (\n          <EventsTable data={eventsData} />\n        )}\n      </Container>\n    </Box>\n  );\n}\n","import axios from 'axios';\n\nexport const authenticate = async (password: string) => {\n  try {\n    await axios.post('/authentication', {\n      password\n    });\n  } catch (error) {\n    const message = error?.response?.data?.message || error.message;\n\n    throw new Error(message);\n  }\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from 'app/store';\n\nimport * as authApi from './authApi';\n\nexport interface AuthState {\n  authenticated: boolean;\n  loading: boolean;\n  error?: string;\n}\n\nconst initialState: AuthState = {\n  authenticated: false,\n  loading: false,\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const postAuthentication = createAsyncThunk(\n  'auth/authenticate',\n  async (password: string) => {\n    await authApi.authenticate(password);\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    resetError: (state) => {\n      state.error = undefined;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(postAuthentication.pending, (state) => {\n        state.loading = true;\n        state.error = undefined;\n      })\n      .addCase(postAuthentication.fulfilled, (state) => {\n        state.loading = false;\n        state.authenticated = true;\n      })\n      .addCase(postAuthentication.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport const { resetError } = counterSlice.actions;\n\nexport const selectAuth = (state: RootState) => state.auth;\n\nexport default counterSlice.reducer;\n","import React from 'react';\r\nimport { Button, LinearProgress } from '@material-ui/core';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { TextField } from 'formik-material-ui';\r\nimport * as Yup from 'yup';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(2, 0, 6),\r\n  },\r\n}));\r\n\r\nconst schema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .required('Required'),\r\n});\r\n\r\ntype AuthFormProps = {\r\n  onSubmit: Function;\r\n  onCloseError: (event: React.SyntheticEvent<Element, Event>) => void;\r\n  loading: boolean;\r\n  error?: string;\r\n};\r\n\r\nfunction ScanForm(props: AuthFormProps) {\r\n  const { onSubmit, onCloseError, loading, error } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        password: ''\r\n      }}\r\n      validationSchema={schema}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setSubmitting(false);\r\n        onSubmit(values.password);\r\n      }}\r\n    >\r\n      {({ submitForm }) => (\r\n        <Form className={classes.form}>\r\n          {error && (\r\n            <Alert severity=\"error\" onClose={onCloseError}>{error}</Alert>\r\n          )}\r\n          <Box>\r\n            <Field\r\n              component={TextField}\r\n              name=\"password\"\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          </Box>\r\n          {loading && (\r\n            <Box margin=\"10px 0px\">\r\n              <LinearProgress />\r\n            </Box>\r\n          )}\r\n          <Button\r\n            className={classes.submit}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={loading}\r\n            onClick={submitForm}\r\n            fullWidth\r\n          >\r\n            Scan\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default ScanForm;\r\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Avatar, Container, Box, Typography } from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\n\nimport { useAppSelector, useAppDispatch } from 'app/hooks';\nimport {\n  selectAuth,\n  postAuthentication,\n  resetError,\n} from './authSlice';\n\nimport AuthForm from './authForm';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(10, 0, 8),\n  },\n  center: {\n    margin: theme.spacing(10, 0, 8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(2),\n    backgroundColor: theme.palette.primary.main,\n  }\n}));\n\nexport default function Auth() {\n  const { authenticated, loading, error } = useAppSelector(selectAuth);\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (authenticated) {\n      history.push('/');\n    }\n  }, [authenticated]);\n\n  const handleAuthenticate = (password: string) => {\n    dispatch(postAuthentication(password));\n  };\n\n  const handleCloseError = () => {\n    dispatch(resetError());\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Box className={classes.center}>\n        <Avatar className={classes.avatar}>\n          <LockIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Authentication\n        </Typography>\n        <AuthForm\n          onSubmit={handleAuthenticate}\n          onCloseError={handleCloseError}\n          loading={loading}\n          error={error}\n        />\n      </Box>\n    </Container>\n  );\n}\n","import React from 'react';\nimport { CssBaseline, Box } from '@material-ui/core';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport Header from 'components/Header';\nimport Footer from 'components/Footer';\n\nimport Scan from 'features/polkadotScan';\n\nimport Auth from 'features/authentication';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100vh\">\n        <Header />\n        <Router>\n          <Switch>\n            <Route exact path=\"/login\">\n              <Auth />\n            </Route>\n            <Route exact path=\"/\">\n              <Scan />\n            </Route>\n            <Redirect to=\"/\" />\n          </Switch>\n        </Router>\n        <Footer />\n      </Box>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport authReducer from 'features/authentication/authSlice';\nimport scanReducer from 'features/polkadotScan/scanSlice';\n\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n    scan: scanReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}