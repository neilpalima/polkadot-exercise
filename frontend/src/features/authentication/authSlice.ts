import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from 'app/store';

import * as authApi from './authApi';

export interface AuthState {
  authenticated: boolean;
  loading: boolean;
  error?: string;
}

const initialState: AuthState = {
  authenticated: false,
  loading: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const postAuthentication = createAsyncThunk(
  'auth/authenticate',
  async (password: string) => {
    await authApi.authenticate(password);
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    resetError: (state) => {
      state.error = undefined;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(postAuthentication.pending, (state) => {
        state.loading = true;
        state.error = undefined;
      })
      .addCase(postAuthentication.fulfilled, (state) => {
        state.loading = false;
        state.authenticated = true;
      })
      .addCase(postAuthentication.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

export const { resetError } = counterSlice.actions;

export const selectAuth = (state: RootState) => state.auth;

export default counterSlice.reducer;
